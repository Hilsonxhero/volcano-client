@use "sass:map";

@use "mixins/buttons";

$button-icon-span-gap: () !default;
$button-icon-span-gap: map.merge(
  (
    "large": 8px,
    "default": 6px,
    "small": 4px,
  ),
  $button-icon-span-gap
);

@include b(button) {
  align-items: center;
  border-radius: 0.5rem;
  display: inline-flex;
  flex: 0 0 auto;
  font-weight: 500;
  justify-content: center;
  outline: 0;
  position: relative;
  text-decoration: none;
  text-indent: 0.0892857143em;
  text-transform: uppercase;
  transition-duration: 0.28s;
  transition-property: box-shadow, transform, opacity;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  vertical-align: middle;
  white-space: nowrap;
  font-size: 0.8rem;
  color: get($text-color, "regular");

  background-color: get($fill-color, "blank");
  border: 1px solid;
  border-color: get($border-color, "light");
  &:hover,
  &:focus {
    // color: getCssVar("button", "hover", "text-color");
    // border-color: getCssVar("button", "hover", "border-color");
    // background-color: getCssVar("button", "hover", "bg-color");
    outline: none;
  }

  &:active {
    // color: getCssVar("button", "active", "text-color");
    // border-color: getCssVar("button", "active", "border-color");
    // background-color: getCssVar("button", "active", "bg-color");
    outline: none;
  }

  &:focus-visible {
    // outline: 2px solid getCssVar("button", "outline-color");
    outline-offset: 1px;
  }

  > span {
    display: inline-flex;
    align-items: center;
  }

  & + & {
    margin-left: 12px;
  }

  @include button-size(
    map.get($button-padding-vertical, "default") - $button-border-width,
    map.get($button-padding-horizontal, "default") - $button-border-width,
    map.get($button-font-size, "default"),
    map.get($button-border-radius, "default")
  );

  &::-moz-focus-inner {
    border: 0;
  }

  & [class*="#{$namespace}-icon"] {
    & + span {
      // margin-left: map.get($button-icon-span-gap, "default");
    }
    svg {
      vertical-align: bottom;
    }
  }

  @include when(plain) {
    border: 1px solid !important;
    // background-color: transparent;
  }

  @include when(active) {
    // color: getCssVar("button", "active", "text-color");
    // border-color: getCssVar("button", "active", "border-color");
    // background-color: getCssVar("button", "active", "bg-color");
    outline: none;
  }

  @include when(disabled) {
    &,
    &:hover,
    &:focus {
      // color: getCssVar("button", "disabled", "text-color");
      cursor: not-allowed;
      // background-image: none;
      // background-color: getCssVar("button", "disabled", "bg-color");
      // border-color: getCssVar("button", "disabled", "border-color");
    }
  }

  @include when(loading) {
    position: relative;
    pointer-events: none;

    &:before {
      // mask the button
      z-index: 1;
      pointer-events: none;
      content: "";
      position: absolute;
      left: -1px;
      top: -1px;
      right: -1px;
      bottom: -1px;
      border-radius: inherit;
      // background-color: getCssVar("mask-color", "extra-light");
    }
  }
  @include when(round) {
    // border-radius: getCssVar("border-radius", "round");
  }
  @include when(circle) {
    border-radius: 50%;

    // padding: map.get($button-padding-vertical, "default") - $button-border-width;
  }

  @include when(text) {
    // color: getCssVar("button", "text-color");
    border: 0 solid transparent;
    background-color: transparent;

    @include when(disabled) {
      // color: getCssVar("button", "disabled", "text-color");
      background-color: transparent !important;
    }

    &:not(.is-disabled) {
      &:hover,
      &:focus {
        // background-color: getCssVar("fill-color", "light");
      }

      &:focus-visible {
        // outline: 2px solid getCssVar("button", "outline-color");
        outline-offset: 1px;
      }

      &:active {
        // background-color: getCssVar("fill-color");
      }

      @include when(has-bg) {
        // background-color: getCssVar("fill-color", "light");

        &:hover,
        &:focus {
          // background-color: getCssVar("fill-color");
        }

        &:active {
          // background-color: getCssVar("fill-color", "dark");
        }
      }
    }
  }

  @include e(text) {
    @include m(expand) {
      letter-spacing: 0.3em;
      margin-right: -0.3em;
    }
  }

  @include when(link) {
    border-color: transparent;
    // color: getCssVar("button", "text-color");
    background: transparent;
    padding: 2px;
    height: auto;

    &:hover,
    &:focus {
      // color: getCssVar("button", "hover", "link-text-color");
    }

    @include when(disabled) {
      // color: getCssVar("button", "disabled", "text-color");
      background-color: transparent !important;
      border-color: transparent !important;
    }

    &:not(.is-disabled) {
      &:hover,
      &:focus {
        border-color: transparent;
        background-color: transparent;
      }

      &:active {
        // color: getCssVar("button", "active-color");
        border-color: transparent;
        background-color: transparent;
      }
    }
  }

  @include m(text) {
    border-color: transparent;
    background: transparent;
    // color: getCssVar("color", "primary");
    padding-left: 0;
    padding-right: 0;
    @include when(disabled) {
      // color: getCssVar("button", "disabled", "text-color");
      background-color: transparent !important;
      border-color: transparent !important;
    }

    &:not(.is-disabled) {
      &:hover,
      &:focus {
        // color: getCssVar("color", "primary", "light-3");
        border-color: transparent;
        background-color: transparent;
      }

      &:active {
        // color: getCssVar("color", "primary", "dark-2");
        border-color: transparent;
        background-color: transparent;
      }
    }
  }

  @include e(link) {
    @include m(expand) {
      letter-spacing: 0.3em;
      margin-right: -0.3em;
    }
  }

  // @each $type in (primary, success, warning, danger, info) {
  //   @include m($type) {
  //     @include button-variant($type);
  //   }
  // }

  @each $name, $value in $theme-colors {
    &.#{$namespace}-button-outline--#{$name} {
      $color: $value;
      $icon-color: $value;
      $bg-color: null;
      $border-color: $value;
      $color-active: null;
      $icon-color-active: null;
      $border-color-active: null;
      $bg-color-active: null;

      @include button-custom-variant(
        $color,
        $icon-color,
        $border-color,
        $bg-color,
        $color-active,
        $icon-color-active,
        $border-color-active,
        $bg-color-active
      );
    }
  }

  @each $name, $value in $theme-colors {
    @include m($name) {
      $color: theme-inverse-color($name);
      $icon-color: theme-inverse-color($name);
      $border-color: $value;
      $bg-color: $value;
      $color-active: theme-inverse-color($name);
      $icon-color-active: theme-inverse-color($name);
      $border-color-active: theme-active-color($name);
      $bg-color-active: theme-active-color($name);
      @include button-custom-variant(
        $color,
        $icon-color,
        $border-color,
        $bg-color,
        $color-active,
        $icon-color-active,
        $border-color-active,
        $bg-color-active
      );
    }
  }

  @each $size in (large, small) {
    @include m($size) {
      // @include set-css-var-value(
      //   ("button", "size"),
      //   map.get($input-height, $size)
      // );

      // height: getCssVar("button", "size");

      & [class*="#{$namespace}-icon"] {
        & + span {
          // margin-left: map.get($button-icon-span-gap, $size);
        }
      }

      @include button-size(
        map.get($button-padding-vertical, $size) - $button-border-width,
        map.get($button-padding-horizontal, $size) - $button-border-width,
        map.get($button-font-size, $size),
        map.get($button-border-radius, $size)
      );

      @include when(circle) {
        // width: getCssVar("button", "size");
        padding: map.get($button-padding-vertical, $size) - $button-border-width;
      }
    }
  }
}
